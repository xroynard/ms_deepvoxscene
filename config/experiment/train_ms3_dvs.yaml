# @package _global_

# to execute this experiment run:
# python run.py experiment=example_simple.yaml

defaults:
  # - pl_datamodule: default.yaml
  - dataset: semantic3d.yaml

  # - pl_netmodule: default.yaml
  - network: modvgglikenet.yaml
  # - optimizer: adam.yaml
  # - loss: crossentropy.yaml
  # - lr_scheduler: cosineannealing.yaml

  # - pl_trainer: default.yaml
  # - callbacks: default.yaml
  # - logger: default.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

# name of the run determines folder name in logs
# it's also accessed by loggers
name: "example_simple"

dataset:
  # name: "parislille3d"
  name: "semantic3d"
  # name: "s3dis"

pl_datamodule:
  PHASE_LIST: ['train'] # Use all point clouds to train the model
  #PHASE_LIST: ['val','train'] # use alternatively each point cloud of the dataset as validation of a model trained on all others point clouds     
  NUM_WORKERS: 8 # Number of threads for pytorch Dataloader 
    
###############################################################################
### use this to use (or not) the color or reflectance channel in input of your networks
#USE_COLOR: True
#USE_COLOR: False
#USE_REFLECTANCE: True
#USE_REFLECTANCE: False
    
###############################################################################
#SCALES: {1}
#SCALES: {1,2}
scales: {1,2,3}
### size of occupancy grid (GRID_SIZE x GRID_SIZE x GRID_SIZE), GRID_SIZE should be <= 64
#GRID_SIZE: 16
GRID_SIZE: 32

###############################################################################
### size of each voxel of occupancy grid (VOXEL_SIZE m x VOXEL_SIZE m x VOXEL_SIZE m)
VOXEL_SIZE: 0.05
#VOXEL_SIZE: 0.10
#VOXEL_SIZE: 0.15
#VOXEL_SIZE: 0.20
#VOXEL_SIZE: 0.40

network: 
  scales: ${scales}

pl_trainer:
  DEVICE_ID: 0 # GPU id
  BATCH_SIZE: 20
  NB_POINTS_PER_CLASS: 1000 # number of points randomly chosen in each class at beginning of each epoch
  NB_POINTS_PER_CLASS_VAL: 1000
  NUM_EPOCHS: 100
  #GRADIENT_CLIPPING: True
  GRADIENT_CLIPPING: False

###############################################################################
### intialization method for weights of the network
#INITIALIZATION: "xavier"
INITIALIZATION: "kaiming"
#INITIALIZATION: "orthogonal"


