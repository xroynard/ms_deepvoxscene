model_checkpoint:
  _target_: pytorch_lightning.callbacks.ModelCheckpoint
  monitor: "val/acc" # name of the logged metric which determines when model is improving
  mode: "max" # "max" means higher metric value is better, can be also "min"
  save_top_k: 1 # save k best models (determined by above metric)
  save_last: True # additionaly always save model from last epoch
  verbose: False
  dirpath: "checkpoints/"
  filename: "epoch_{epoch:03d}"
  auto_insert_metric_name: False

early_stopping:
  _target_: pytorch_lightning.callbacks.EarlyStopping
  monitor: "val/acc" # name of the logged metric which determines when model is improving
  mode: "max" # "max" means higher metric value is better, can be also "min"
  patience: 100 # how many validation epochs of not improving until training stops
  min_delta: 0 # minimum change in the monitored metric needed to qualify as an improvement

rich_progress_bar:
  _target_: pytorch_lightning.callbacks.RichProgressBar
  # refresh_rate: 1
  # leave: False
  # theme: 
  #   _target_: pytorch_lightning.callbacks.progress.rich_progress.RichProgressBarTheme
  #   description: 'white'
  #   progress_bar: '#6206E0'
  #   progress_bar_finished: '#6206E0'
  #   progress_bar_pulse: '#6206E0'
  #   batch_progress: 'white'
  #   time: 'grey54'
  #   processing_speed: 'grey70'
  #   metrics: 'white'

lr_monitor:
  _target_: pytorch_lightning.callbacks.LearningRateMonitoru
  # logging_interval: None
  # log_momentum: False

resample_dataset:
  _target_: src.callback.randomize.RandomizeDataset

confusion_matrix:
  _target_: src.callback.confusion_matrix.ConfusionMatrix
  nb_classes: ${dataset.nb_classes}